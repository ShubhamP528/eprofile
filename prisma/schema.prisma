generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(cuid())
  email              String           @unique
  name               String?
  image              String?
  emailVerified      DateTime?
  password           String?
  subscription       SubscriptionType @default(FREE)
  subscriptionExpiry DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  accounts           Account[]
  cards              Card[]
  leads              Lead[]
  sessions           Session[]
  paymentHistory     PaymentHistory[]
  subscriptionEvents SubscriptionEvent[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Card {
  id             String        @id @default(cuid())
  userId         String
  username       String        @unique
  title          String
  subtitle       String?
  bio            String?
  profileImage   String?
  coverImage     String?
  template       String        @default("template1")
  customDomain   String?
  phone          String?
  email          String?
  address        String?
  isPublic       Boolean       @default(true)
  seoTitle       String?
  seoDescription String?
  // Payment Options
  upiId          String?
  upiQrCode      String?
  razorpayId     String?
  paytmId        String?
  paymentEnabled Boolean       @default(false)
  paymentText    String?       @default("Pay Now")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  buttonClicks   ButtonClick[]
  cardViews      CardView[]
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  gallery        GalleryItem[]
  leads          Lead[]
  services       Service[]
  socialLinks    SocialLink[]
  testimonials   Testimonial[]

  @@map("cards")
}

model SocialLink {
  id       String @id @default(cuid())
  cardId   String
  platform String
  url      String
  order    Int    @default(0)
  card     Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("social_links")
}

model Service {
  id          String  @id @default(cuid())
  cardId      String
  title       String
  description String?
  price       String?
  isFeatured  Boolean @default(false)
  order       Int     @default(0)
  card        Card    @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("services")
}

model GalleryItem {
  id     String      @id @default(cuid())
  cardId String
  type   GalleryType
  url    String
  title  String?
  order  Int         @default(0)
  card   Card        @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("gallery_items")
}

model Testimonial {
  id           String @id @default(cuid())
  cardId       String
  customerName String
  content      String
  rating       Int?   @default(5)
  order        Int    @default(0)
  card         Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("testimonials")
}

model Lead {
  id        String     @id @default(cuid())
  cardId    String
  userId    String
  name      String
  email     String?
  phone     String?
  message   String
  status    LeadStatus @default(NEW)
  source    String?
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  card      Card       @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("leads")
}

model CardView {
  id        String   @id @default(cuid())
  cardId    String
  visitorId String
  referrer  String?
  userAgent String?
  country   String?
  createdAt DateTime @default(now())
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("card_views")
}

model ButtonClick {
  id         String     @id @default(cuid())
  cardId     String
  buttonType ButtonType
  createdAt  DateTime   @default(now())
  card       Card       @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("button_clicks")
}

enum SubscriptionType {
  FREE
  STANDARD
  PRO
}

enum GalleryType {
  IMAGE
  VIDEO
}

enum LeadStatus {
  NEW
  CONTACTED
  CONVERTED
  CLOSED
}

enum ButtonType {
  PHONE
  EMAIL
  WHATSAPP
  LOCATION
  WEBSITE
}

model PaymentHistory {
  id            String    @id @default(cuid())
  userId        String
  paymentId     String    @unique
  orderId       String
  amount        Int       // Amount in paise
  currency      String    @default("INR")
  status        String
  plan          String
  createdAt     DateTime  @default(now())
  
  // Enhanced fields for billing history tracking
  paymentMethod String?   // "card", "upi", "netbanking", "wallet", etc.
  cardLast4     String?   // Last 4 digits of card for display
  description   String?   // Human-readable payment description
  invoiceUrl    String?   // Generated invoice download URL
  refundAmount  Int?      // Refund amount in paise if applicable
  refundedAt    DateTime? // Timestamp when refund was processed
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_history")
}

model SubscriptionEvent {
  id          String           @id @default(cuid())
  userId      String
  eventType   SubscriptionEventType
  fromPlan    SubscriptionType?
  toPlan      SubscriptionType
  description String?
  createdAt   DateTime         @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscription_events")
}

enum SubscriptionEventType {
  SIGNUP
  UPGRADE
  DOWNGRADE
  RENEWAL
  EXPIRY
  CANCELLATION
}
